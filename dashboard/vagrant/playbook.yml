---
- hosts: all
  sudo: true
  vars:
    frontend_root: /srv/frontend
    backend_root: /srv/backend
    backend_app: /srv/backend/dashboard
    virtualenv_path: /home/vagrant/django-venv
  tasks:
    - name: Update apt cache
      apt: update_cache=yes

    - name: Install Apache
      apt:
        name: apache2
        state: present

    - name: Set DJANGO_DEBUG=true in Apache2 env variables
      lineinfile:
        dest: /etc/apache2/envvars
        line: export DJANGO_DEBUG=true

    - name: Install Apache WSGI module
      apt:
        name: libapache2-mod-wsgi
        state: present

    - name: Install pip
      apt:
        name: python-pip
        state: present

    - name: Install virtualenv
      pip:
        name: virtualenv
        version: 15.1.0

    - name: Manually create the initial virtualenv
      command: virtualenv "{{ virtualenv_path }}"
      args:
        creates: "{{ virtualenv_path }}"

    - name: Check that the requirements.txt file exists
      stat:
        path: "{{ backend_root }}/requirements.txt"
      register: requirements_exist

    - name: Install dependencies
      pip:
        virtualenv: "{{ virtualenv_path }}"
        requirements: "{{ backend_root }}/requirements.txt"
      when: requirements_exist.stat.exists == True

    - name: Copy .bash_rc which switches to django virtualenv by default
      template:
        src: ./bashrc.j2
        dest: /home/vagrant/.bashrc

    - name: Open ports 8000 and 80 on Apache
      template:
        src: ./apache-ports.conf.j2
        dest: /etc/apache2/ports.conf

    - name: Enable Apache WSGI module
      apache2_module:
        state: present
        name: wsgi

    - name: Enable Apache rewrite module
      apache2_module:
        state: present
        name: rewrite

    - name: Create Apache virtual host for front-end
      template:
        src: ./vhost-frontend.conf.j2
        dest: /etc/apache2/sites-available/frontend.conf

    - name: Create Apache virtual host for back-end
      template:
        src: ./vhost-frontend.conf.j2
        dest: /etc/apache2/sites-available/frontend.conf

    - name: Create Apache virtual host for back-end
      template:
        src: vhost-backend.conf.j2
        dest: /etc/apache2/sites-available/backend.conf

    - name: Delete default virtualhost file
      file:
        path: /etc/apache2/sites-enabled/000-default.conf
        state: absent

    - name: Enable front-end virtual host
      file:
        src: /etc/apache2/sites-available/frontend.conf
        dest: /etc/apache2/sites-enabled/frontend.conf
        state: link

    - name: Enable back-end virtual host
      file:
        src: /etc/apache2/sites-available/backend.conf
        dest: /etc/apache2/sites-enabled/backend.conf
        state: link

    - name: Install mod_auth_openidc module for Apache2
      apt:
        name: libapache2-mod-auth-openidc
        state: present

    - name: Install libcjose
      apt:
        name: libcjose0
        state: present

    - name: Install previously missed dependencies
      command: apt-get install -f

    - name: Enable Apache auth_openidc module
      apache2_module:
        state: present
        name: auth_openidc

    - name: Configure OpenIDC protected routes
      template:
        src: ./openid.conf
        dest: /etc/apache2/conf-available/openid.conf

    - name: Enable OpenIDC protected routes configuration
      command: a2enconf openid.conf

    - name: Install Curl
      apt:
        name: curl
        state: present

    - name: Preinstall Node.js
      shell: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -

    - name: Install Node.js
      apt:
        name: nodejs
        state: present

    - name: Install Angular CLI
      command: "npm install -g --unsafe-perm @angular/cli@latest"

    - name: Install dashboard modules
      command: npm install --no-bin-links
      args:
        chdir: "{{ frontend_root }}"
        creates: "{{ frontend_root }}/node-modules/"

    - name: Fix access rights
      command: "chown -R vagrant:vagrant /srv/frontend/node_modules"
      sudo: true

    - name: Build angular application via Angular CLI
      command: ng build
      sudo: false
      args:
        chdir: "{{ frontend_root }}"
        creates: "{{ frontend_root }}/dist/"

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
